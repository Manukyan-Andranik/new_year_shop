from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from datetime import datetime, timezone
import json
import random

db = SQLAlchemy()

class Product(db.Model):
    __tablename__ = 'products'
    __table_args__ = {'schema': 'newyear_shop_schema'}

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False, index=True)
    price = db.Column(db.Numeric(10, 2), nullable=False)
    description = db.Column(db.Text)
    images_url_list = db.Column(db.Text)
    category = db.Column(db.String(100), index=True)
    type = db.Column(db.String(50), index=True)
    is_active = db.Column(db.Boolean, default=True, nullable=False)
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(timezone.utc))
    updated_at = db.Column(
        db.DateTime,
        default=lambda: datetime.now(timezone.utc),
        onupdate=lambda: datetime.now(timezone.utc)
    )

    # Translation fields
    name_en = db.Column(db.String(200))
    name_hy = db.Column(db.String(200))
    name_ru = db.Column(db.String(200))
    description_en = db.Column(db.Text)
    description_hy = db.Column(db.Text)
    description_ru = db.Column(db.Text)

    
    def __repr__(self):
        return f'<Product {self.name}>'

    def get_translated(self, field_base, lang):
        field_name = f"{field_base}_{lang}"
        value = getattr(self, field_name, None)
        if value:
            return value
        return getattr(self, f"{field_base}_en", None) or getattr(self, field_base, "")

    def to_dict(self, lang='en'):
        public_desc = self.get_public_description(self.category)
        return {
            'id': self.id,
            'name': self.get_translated('name', lang),
            'price': float(self.price) if self.price else 0.0,
            'description': self.get_translated('description', lang),
            'public_description': public_desc.get(lang),
            'shape': public_desc["shape"].get(lang) or "shape",
            'images_url_list': json.loads(self.images_url_list) if self.images_url_list else [],
            'category': self.category,
            'type': self.type,
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
        }

    def get_public_description(self, category):
        public_descriptions = {
            "small": {
                "hy": {
                    "shape": "(45‚Äì55 ’¥’¥)",
                    1: """’ì’∏÷Ñ÷Ä’´’Ø ’π’°÷É’Ω, ’¢’°’µ÷Å ’¥’•’Æ ’¶’£’°÷Å’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂ üåü  
    ‘±’µ’Ω ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’® ’±’•’º’°’£’∏÷Ä’Æ ’°÷Ä’æ’•’Ω’ø’´ ’¨’°’æ’°’£’∏÷Ç’µ’∂ ÷Ö÷Ä’´’∂’°’Ø’∂ ’•’∂’ù ’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä’® ’Ω’ø’•’≤’Æ’æ’°’Æ ’Ω’´÷Ä’∏’æ ’∏÷Ç ’∞’°’¥’¢’•÷Ä’∏÷Ç’©’µ’°’¥’¢÷â ’Ü’Ø’°÷Ä’æ’°’Æ ’•’∂ ’¢’°÷Ä’±÷Ä’∏÷Ä’°’Ø ’∂’•÷Ä’Ø’•÷Ä’∏’æ, ÷É’°’µ’¨’∏÷Ç’∂ ÷á ’ø’∏’∂’°’Ø’°’∂ ’£’∏÷Ç’µ’∂’•÷Ä’∏’æ, ’´’Ω’Ø ÷É’°’µ’ø’® ’∞’°’ø’∏÷Ç’Ø ’¥’∑’°’Ø’æ’•’¨ ’ß’ù ’∫’°’∞’•’¨’∏’æ ’´÷Ä ’¢’∂’°’Ø’°’∂ ’∞’¥’°’µ÷Ñ’®÷â üé®  
    45‚Äì55 ’¥’¥ ’π’°÷É’Ω’∏’æ ’°’µ’Ω ÷É’∏÷Ñ÷Ä’´’Ø ’∞÷Ä’°’∑÷Ñ’∂’•÷Ä’® ’Ø’°’ø’°÷Ä’µ’°’¨ ’•’∂’ù ’∏÷Ä’∫’•’Ω ’∂’∏÷Ç÷Ä’¢ ’Æ’°’º’´ ’¶’°÷Ä’§ ’Ø’°’¥ ’∂’æ’•÷Ä’´ ’∞’•’ø ’°’∂’°’Ø’∂’Ø’°’¨ ’∞’°’æ’•’¨’∏÷Ç’¥ üéÅ÷â""",
                    2: """’â’°÷É’•÷Ä’∏’æ ÷É’∏÷Ñ÷Ä, ’¢’°’µ÷Å ’Ø’°’≠’°÷Ä’§’°’∂÷Ñ’∏’æ ’¥’•’Æ üéÑ  
    ‘±’µ’Ω ÷É’°’µ’ø’• ’±’•’º’°’£’∏÷Ä’Æ ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’® ’¨÷Å’∂’∏÷Ç’¥ ’•’∂ ’ø’°÷Ä’°’Æ÷Ñ’® ’∏÷Ç÷Ä’°’≠’∏÷Ç’©’µ’°’¥’¢ ÷á ’ª’•÷Ä’¥’∏÷Ç’©’µ’°’¥’¢÷â ‘≤’°÷Ä’±÷Ä’∏÷Ä’°’Ø ’∂’•÷Ä’Ø’•÷Ä’® ’°’∫’°’∞’∏’æ’∏÷Ç’¥ ’•’∂ ’•÷Ä’Ø’°÷Ä ’Ø’µ’°’∂÷Ñ ÷á ’£’∏÷Ç’∂’°’µ’´’∂ ’Ø’°’µ’∏÷Ç’∂’∏÷Ç’©’µ’∏÷Ç’∂ üåà÷â  
    ’Ü÷Ä’°’∂÷Ñ ’§’°’º’∂’∏÷Ç’¥ ’•’∂ ÷Ñ’∏ ’ø’∏’∂’´ ÷É’∏÷Ñ÷Ä’´’Ø ’¥’∏’£’°’Ø’°’∂ ’∑’•’∑’ø’°’§÷Ä’∏÷Ç’¥’®’ù ’¢’•÷Ä’•’¨’∏’æ ’™’∫’´’ø ’∏÷Ç ’¨’∏÷Ç’µ’Ω ‚ú®÷â""",
                    3: """‘±’µ’Ω ÷É’∏÷Ñ÷Ä’´’Ø ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’∂ ’Ω’ø’•’≤’Æ’æ’•’¨ ’•’∂ ’Ω’´÷Ä’∏’æ, ’∞’°’æ’°’ø’∏’æ ’∏÷Ç ’¢’°÷Ä’´ ’¥’°’≤’©’°’∂÷Ñ’∂’•÷Ä’∏’æ ‚ù§Ô∏è  
    ’Ö’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’≠’°’≤’°’¨’´÷Ñ ’∏÷Ç’∂’´ ’´÷Ä ’∫’°’ø’¥’∏÷Ç’©’µ’∏÷Ç’∂’®’ù ÷É’°’µ’ø’´÷Å ’Æ’∂’æ’°’Æ ’∏÷Ç ’∂’•÷Ä’Ø’•÷Ä’´÷Å ’¶’°÷Ä’§’°÷Ä’æ’°’Æ÷â ‘≤’°÷Ä’±÷Ä’∏÷Ä’°’Ø ’∂’µ’∏÷Ç’©’•÷Ä’∂ ’°’∫’°’∞’∏’æ’∏÷Ç’¥ ’•’∂ ’ø’°÷Ä’´’∂’•÷Ä’´ ’£’•’≤’•÷Å’Ø’∏÷Ç’©’µ’∏÷Ç’∂ üåü÷â  
    ’è’∏’∂’´ ’°’¥’•’∂’°÷É’∏÷Ñ÷Ä, ’¢’°’µ÷Å ’°’¥’•’∂’°’©’°’∂’Ø ’∞’•÷Ä’∏’Ω’∂’•÷Ä’® ’∞’•’∂÷Å ’°’µ’Ω ÷É’∏÷Ñ÷Ä’´’Ø’∂’•÷Ä’∂ ’•’∂ üíñüéÖ÷â"""
                },
                "ru": {
                    "shape": "(45‚Äì55 –º–º)",
                    1: """–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä ‚Äî –±–æ–ª—å—à–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ üåü  
    –≠—Ç–∏ –∏–≥—Ä—É—à–∫–∏ ‚Äî –ø—Ä–∏–º–µ—Ä –ª—É—á—à–µ–≥–æ —Ä—É—á–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ª—é–±–æ–≤—å—é –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ–º. –û–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏, —Å–∏—è—é—â–∏–º–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏, –∞ –¥–µ—Ä–µ–≤–æ –±–µ—Ä–µ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å–≤–æ—é –ø—Ä–∏—Ä–æ–¥–Ω—É—é –∫—Ä–∞—Å–æ—Ç—É üå≤.  
    –†–∞–∑–º–µ—Ä 45‚Äì55 –º–º –¥–µ–ª–∞–µ—Ç –∏—Ö –∏–¥–µ–∞–ª—å–Ω—ã–º —É–∫—Ä–∞—à–µ–Ω–∏–µ–º –¥–ª—è –µ–ª–∫–∏ –∏–ª–∏ –º–∏–ª—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –ø–æ–¥–∞—Ä–∫—É üéÅ.""",
                    2: """–ù–µ–±–æ–ª—å—à–∏–µ, –Ω–æ –ø–æ–ª–Ω—ã–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞ üéÑ  
    –≠—Ç–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∏–≥—Ä—É—à–∫–∏ –Ω–∞–ø–æ–ª–Ω—è—é—Ç –¥–æ–º —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Ç–µ–ø–ª–æ–º. –Ø—Ä–∫–∏–µ, —Å—Ç–æ–π–∫–∏–µ –∫—Ä–∞—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ–∏ —Ü–≤–µ—Ç–∞ –Ω–∞ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã üåà.  
    –ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è –∏–≥—Ä—É—à–∫–∞ —Å—Ç–∞–Ω–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º —Å–≤–µ—Ç–∞ –∏ —É–ª—ã–±–æ–∫ ‚ú®.""",
                    3: """–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ª—é–±–æ–≤—å—é –∏ –¥–æ–±—Ä—ã–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ ‚ù§Ô∏è  
    –ö–∞–∂–¥–∞—è –∏–≥—Ä—É—à–∫–∞ ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è, —Ä–æ–∂–¥–µ–Ω–Ω–∞—è –∏–∑ –¥–µ—Ä–µ–≤–∞ –∏ —Ä–∞—Å–∫—Ä–∞—à–µ–Ω–Ω–∞—è –≤—Ä—É—á–Ω—É—é üé®.  
    –û–Ω–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –≥–µ—Ä–æ–∏ –±–æ–ª—å—à–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ‚Äî —Å–∞–º—ã–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏ —Ü–µ–Ω–Ω—ã–µ —Å—É–≤–µ–Ω–∏—Ä—ã üíñüéÖ."""
                },
                "en": {
                    "shape": "(45‚Äì55 mm)",
                    1: """Small in size, big in feeling üåü  
    These ornaments are masterpieces of handcraft ‚Äî each made with love and patience. Painted with premium colors and festive sparkle, the wood is carefully treated to preserve its natural charm üå≤.  
    At 45‚Äì55 mm, these little wonders are perfect as delicate tree decor or a charming gift addition üéÅ.""",
                    2: """Tiny but full of magic üéÑ  
    These handmade wooden ornaments fill your home with joy and warmth. Long-lasting, vibrant colors ensure beauty for years to come üåà.  
    Each one becomes a little highlight of your holiday ‚Äî spreading smiles and light ‚ú®.""",
                    3: """Made with love, faith, and warm wishes ‚ù§Ô∏è  
    Every piece tells its own story ‚Äî born from wood, painted by hand, and glowing with festive spirit üé®.  
    They are the smallest yet most precious heroes of the holiday season üíñüéÖ."""
                }
            },

            "large": {
                "hy": {
                    "shape": "(55‚Äì70 ’¥’¥)",
                    1: """‘±’µ’Ω ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’® ’¥’•’Æ ’•’∂ ’∏’π ’¥’´’°’µ’∂ ’π’°÷É’∏’æ, ’°’µ’¨÷á ’´÷Ä’•’∂÷Å ’ø’∏’∂’°’Ø’°’∂ ’∏’£’∏’æ ‚ú®  
    55‚Äì70 ’¥’¥ ’ø÷Ä’°’¥’°’π’°÷É’∏’æ ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’® ’§’°’º’∂’∏÷Ç’¥ ’•’∂ ’ø’∏’∂’°’Æ’°’º’´ ’£’¨’≠’°’æ’∏÷Ä ’¶’°÷Ä’§’®’ù ’£÷Ä’°’æ’•’¨’∏’æ ’∏÷Ç’∑’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ÷É’°’µ’¨’∏’æ ’∏÷Ç ’±’•’º÷Ñ’´ ’°’∑’≠’°’ø’°’∂÷Ñ’´ ’∂÷Ä’¢’∏÷Ç’©’µ’°’¥’¢ üåü÷â  
    ’ì’°’µ’ø’® ’¢’°÷Ä’±÷Ä’∏÷Ä’°’Ø ’ß, ’≠’∂’°’¥÷Ñ’∏’æ ’¥’∑’°’Ø’æ’°’Æ’ù ’°’∫’°’∞’∏’æ’•’¨’∏’æ ’°’¥÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ÷á ’£’•’≤’•÷Å’Ø’∏÷Ç’©’µ’∏÷Ç’∂÷â ’Ü’•÷Ä’Ø’æ’°’Æ ’•’∂ ’∏’π ’©’∏÷Ç’∂’°’æ’∏÷Ä, ’•÷Ä’Ø’°÷Ä’°’ø÷á ’∂’•÷Ä’Ø’•÷Ä’∏’æ’ù ’∫’°’∞’∫’°’∂’•’¨’∏’æ ’´÷Ä’•’∂÷Å ’ø’•’Ω÷Ñ’® ’ø’°÷Ä’´’∂’•÷Ä ’∑’°÷Ä’∏÷Ç’∂’°’Ø üé®.""",
                    2: """’Ñ’•÷Ä ’¥’•’Æ ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’® ’∞’°’¥’°’§÷Ä’∏÷Ç’¥ ’•’∂ ’§’°’Ω’°’Ø’°’∂ ’±÷á’® ÷á ’™’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’æ’°÷Ä’∫’•’ø’∏÷Ç’©’µ’∏÷Ç’∂’® üéÅ  
    ’Ö’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’≠’°’≤’°’¨’´÷Ñ ’∫’°’ø÷Ä’°’Ω’ø’æ’∏÷Ç’¥ ’ß ’±’•’º÷Ñ’∏’æ’ù ÷É’°’µ’¨’∏÷Ç’∂ ÷á ’ª’•÷Ä’¥ ’£’∏÷Ç’µ’∂’•÷Ä’∏’æ÷â ’Ü÷Ä’°’∂÷Ñ ’∏’π ’¥’´’°’µ’∂ ’Æ’°’º’´ ’¶’°÷Ä’§ ’•’∂, ’°’µ’¨÷á ÷É’∏÷Ñ÷Ä ’°÷Ä’æ’•’Ω’ø’´ ’£’∏÷Ä’Æ’ù ’¨’´ ’ø’∏’∂’°’Ø’°’∂ ’ß’∂’•÷Ä’£’´’°’µ’∏’æ ‚ú®÷â  
    55‚Äì70 ’¥’¥ ’π’°÷É’Ω’´ ’≠’°’≤’°’¨’´÷Ñ’® ’§’°’º’∂’∏÷Ç’¥ ’ß ’Ø’•’∂’ø÷Ä’∏’∂’°’Ø’°’∂ ’ø’°÷Ä÷Ä’ù ’´’∂’π’∫’•’Ω ’Æ’°’º’´, ’°’µ’∂’∫’•’Ω ’ß’¨ ’ø’°’∂ ’§’•’Ø’∏÷Ä’´ ’∞’°’¥’°÷Ä üéÑ.""",
                    3: """55‚Äì70 ’¥’¥ ’ø÷Ä’°’¥’°’π’°÷É’∏’æ ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’® ’¥’°÷Ä’¥’∂’°’æ’∏÷Ä’∏÷Ç’¥ ’•’∂ ’±’¥’•’º’°’µ’´’∂ ’∞÷Ä’°’∑÷Ñ’´ ’°’¥’¢’∏’≤’ª ’Ø’°’≠’°÷Ä’§’°’∂÷Ñ’® ‚ùÑÔ∏è  
    ’Å’•’º’°’£’∏÷Ä’Æ, ’µ’∏÷Ç÷Ä’°’∞’°’ø’∏÷Ç’Ø ÷á ’∞’´’∑’•÷Å’∏÷Ç’¥ ’ø’°’∂ ’ª’•÷Ä’¥’∏÷Ç’©’µ’°’∂ ’¥’°’Ω’´’∂ üí´÷â  
    ‘≤’°÷Ä’±÷Ä’∏÷Ä’°’Ø ’∂’•÷Ä’Ø’•÷Ä’∂ ’∏÷Ç ÷É’°’µ’ø’´ ’∂’∏÷Ç÷Ä’¢ ’¥’∑’°’Ø’∏÷Ç’¥’® ’§’°÷Ä’±’∂’∏÷Ç’¥ ’•’∂ ’§÷Ä’°’∂÷Ñ ’∞’´’°’Ω÷Ñ’°’∂’π ’°÷Ä’æ’•’Ω’ø’´ ’∂’¥’∏÷Ç’∑’∂’•÷Ä’ù ’∫’°’ø÷Ä’°’Ω’ø’æ’°’Æ ’∞’°’ø’∏÷Ç’Ø ÷Ñ’∏ ’ø’∏’∂’´ ’∞’°’¥’°÷Ä üéÖ."""
                },
                "ru": {
                    "shape": "(55‚Äì70 –º–º)",
                    1: """–≠—Ç–∏ –∏–≥—Ä—É—à–∫–∏ –≤–µ–ª–∏–∫–∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–º, –Ω–æ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º –¥—É—Ö–æ–º ‚ú®  
    –ò–≥—Ä—É—à–∫–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–º 55‚Äì70 –º–º —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º —É–∫—Ä–∞—à–µ–Ω–∏–µ–º –µ–ª–∫–∏, —Å–∏—è—è –±–ª–µ—Å–∫–æ–º —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã üåü.  
    –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏ –Ω–µ—Ç–æ–∫—Å–∏—á–Ω—ã–µ –∫—Ä–∞—Å–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∞—Å–æ—Ç—É üé®.""",
                    2: """–ù–∞—à–∏ –±–æ–ª—å—à–∏–µ –∏–≥—Ä—É—à–∫–∏ —Å–æ—á–µ—Ç–∞—é—Ç –∫–ª–∞—Å—Å–∏–∫—É –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ üéÅ  
    –ö–∞–∂–¥–∞—è –∏–≥—Ä—É—à–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –ø–æ–∫—Ä—ã—Ç–∞—è —è—Ä–∫–∏–º–∏ –∏ —Ç–µ–ø–ª—ã–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏.  
    –û–Ω–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–∫—Ä–∞—à–µ–Ω–∏—è, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π ‚ú®.  
    –†–∞–∑–º–µ—Ä 55‚Äì70 –º–º –¥–µ–ª–∞–µ—Ç –∏—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤–∞—à–µ–≥–æ –¥–µ–∫–æ—Ä–∞ üéÑ.""",
                    3: """–ò–≥—Ä—É—à–∫–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–º 55‚Äì70 –º–º –≤–æ–ø–ª–æ—â–∞—é—Ç –≤—Å—é –º–∞–≥–∏—é –∑–∏–º–Ω–µ–≥–æ —á—É–¥–∞ ‚ùÑÔ∏è  
    –†—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–µ–ø–ª–æ –¥–æ–º–∞—à–Ω–µ–≥–æ —É—é—Ç–∞ üí´.  
    –ë–ª–∞–≥–æ–¥–∞—Ä—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ —Ç–æ–Ω–∫–æ–π –æ—Ç–¥–µ–ª–∫–µ –æ–Ω–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —à–µ–¥–µ–≤—Ä–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üéÖ."""
                },
                "en": {
                    "shape": "(55‚Äì70 mm)",
                    1: """These ornaments are grand not only in size but also in festive spirit ‚ú®  
    At 55‚Äì70 mm, they become the centerpiece of your Christmas tree ‚Äî shining with handcrafted detail and warmth üåü.  
    Made from high-quality wood and painted with long-lasting, non-toxic colors, they stay beautiful for many holidays to come üé®.""",
                    2: """Our large ornaments combine classic design with modern craftsmanship üéÅ  
    Each one is handmade and painted in warm, vibrant tones ‚Äî a true work of art filled with festive energy ‚ú®.  
    The 55‚Äì70 mm size makes them the perfect centerpiece for your tree or home d√©cor üéÑ.""",
                    3: """At 55‚Äì70 mm, these ornaments capture the full magic of the winter season ‚ùÑÔ∏è  
    Handcrafted, unique, and full of warmth üí´.  
    Premium materials and fine detailing make them timeless art pieces ‚Äî created especially for your celebration üéÖ."""
                }
            }
        }

        # Pick random variant (1, 2, or 3)
        idx = random.randint(1, 3)
        descs = public_descriptions.get(category)

        if not descs:
            raise ValueError(f"Unknown category: {category}")

        public_desc = {
            "hy": descs["hy"].get(idx),
            "ru": descs["ru"].get(idx),
            "en": descs["en"].get(idx),
            "shape": {
                "hy": descs["hy"]["shape"],
                "ru": descs["ru"]["shape"],
                "en": descs["en"]["shape"]
            }
        }

        return public_desc


class Order(db.Model):
    __tablename__ = 'orders'
    __table_args__ = {'schema': 'newyear_shop_schema'}

    id = db.Column(db.Integer, primary_key=True)
    customer_name = db.Column(db.String(200), nullable=False, index=True)
    phone = db.Column(db.String(20), nullable=False)
    email = db.Column(db.String(120), nullable=False, index=True)
    comment = db.Column(db.Text)
    items = db.Column(db.Text)
    status = db.Column(db.String(20), default='new', nullable=False, index=True)
    total_amount = db.Column(db.Numeric(10, 2), default=0.00)
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(timezone.utc))
    updated_at = db.Column(db.DateTime, default=lambda: datetime.now(timezone.utc),
                           onupdate=lambda: datetime.now(timezone.utc))
    
    def __repr__(self):
        return f'<Order {self.id} - {self.customer_name}>'
    
    def to_dict(self):
        return {
            'id': self.id,
            'customer_name': self.customer_name,
            'phone': self.phone,
            'email': self.email,
            'comment': self.comment,
            'items': json.loads(self.items) if self.items else [],
            'status': self.status,
            'total_amount': float(self.total_amount) if self.total_amount else 0.0,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }

class AdminUser(UserMixin, db.Model):
    __tablename__ = 'admin_users'
    __table_args__ = {'schema': 'newyear_shop_schema'}

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False, index=True)
    password_hash = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(timezone.utc))
    
    def __repr__(self):
        return f'<AdminUser {self.username}>'

class ProductType(db.Model):
    __tablename__ = "product_types"
    __table_args__ = {'schema': 'newyear_shop_schema'}

    id = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String(50), nullable=False, unique=True, index=True)
    title = db.Column(db.String(250), nullable=False, unique=True, index=True)
    description = db.Column(db.String(1024))
    image_url = db.Column(db.String(200))

    # Translation fields
    title_en = db.Column(db.String(250))
    title_hy = db.Column(db.String(250))
    title_ru = db.Column(db.String(250))
    description_en = db.Column(db.Text)
    description_hy = db.Column(db.Text)
    description_ru = db.Column(db.Text)

    def image_url_full(self, prefix: str = "") -> str:
        """Return full image URL or default placeholder."""
        default = "http://logiclab.am/mandarin/static/images/default_product_type_image.png"
        # if not self.image_url:
        #     return default
        # if self.image_url.startswith("http"):
        #     return self.image_url
        # if prefix:
        #     if not prefix.endswith("/") and not self.image_url.startswith("/"):
        #         return prefix + "/" + self.image_url
        #     return prefix.rstrip("/") + "/" + self.image_url.lstrip("/")
        return default

    def get_translated(self, field_base, lang):
        field_name = f"{field_base}_{lang}"
        value = getattr(self, field_name, None)
        if value:
            return value
        return getattr(self, f"{field_base}_en", None) or getattr(self, field_base, "")

    def to_dict(self, lang='en'):
        return {
            "id": self.id,
            "type": self.type,
            "title": self.get_translated("title", lang),
            "description": self.get_translated("description", lang),
            "image_url": self.image_url_full()
        }

    def __repr__(self):
        return f"<ProductType {self.title}>"

class ProductTypesSamples:
    def __init__(self):
        self.data = [
            {
                "type": "teacher",
                "title_hy": "’Å’•÷Ä ’Ω’´÷Ä’•’¨’´ ’§’∫÷Ä’∏÷Å’´/’¥’°’∂’Ø’°’∫’°÷Ä’ø’•’¶’´ ’∏÷Ç’Ω’∏÷Ç÷Å’´’π’∂’•÷Ä’´ ’∞’°’¥’°÷Ä",
                "title_en": "For your favorite school/kindergarten teachers",
                "title_ru": "–î–ª—è –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö —É—á–∏—Ç–µ–ª–µ–π —à–∫–æ–ª—ã/–¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞",
                "description_hy": "’è’∏’∂’°’Ø’°’∂ ÷É’°’µ’ø’• ’¶’°÷Ä’§’•÷Ä’ù ’∏÷Ç’Ω’∏÷Ç÷Å’´’π’∂’•÷Ä’´ ÷á ’§’°’Ω’ø’´’°÷Ä’°’Ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â",
                "description_en": "Festive wooden ornaments for teachers and educators.",
                "description_ru": "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π –∏ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–µ–π.",
                "image_url": "images/default_product_type_image.png",
            },
            {
                "type": "staff",
                "title_hy": "’ç’´÷Ä’•’¨’´ ’°’∑’≠’°’ø’°’Ø’´÷Å’∂’•÷Ä’´ ’∞’°’¥’°÷Ä",
                "title_en": "For beloved staff members",
                "title_ru": "–î–ª—è –ª—é–±–∏–º—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                "description_hy": "’ì’°’µ’ø’• ’ø’∏’∂’°’Ø’°’∂ ’∂’æ’•÷Ä’∂’•÷Ä’ù ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â",
                "description_en": "Wooden holiday gifts for colleagues.",
                "description_ru": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –∫–æ–ª–ª–µ–≥.",
                "image_url": "images/default_product_type_image.png",
            },
            {
                "type": "love",
                "title_hy": "’ç’´÷Ä’•’¨’´’Ω ’∞’°’¥’°÷Ä",
                "title_en": "For your loved one",
                "title_ru": "–î–ª—è –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
                "description_hy": "’Ä’∏÷Ç’∑’°÷Ä’™’•÷Ñ ÷É’°’µ’ø’• ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’ù ’Ω’´÷Ä’•’¨’´’´ ’∞’°’¥’°÷Ä÷â",
                "description_en": "Memorable wooden toys for your loved one.",
                "description_ru": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —Å—É–≤–µ–Ω–∏—Ä—ã –¥–ª—è –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
                "image_url": "images/default_product_type_image.png",
            },
            {
                "type": "friend",
                "title_hy": "‘∏’∂’Ø’•÷Ä’∏’ª ’∞’°’¥’°÷Ä",
                "title_en": "For a friend",
                "title_ru": "–î–ª—è –¥—Ä—É–≥–∞",
                "description_hy": "‘≤’∂’°’æ’∏÷Ä’∏÷Ç’©’µ’°’¥’¢ ’¨’´ ’¶’°÷Ä’§’•÷Ä’ù ’±’•÷Ä ’¨’°’æ ’®’∂’Ø’•÷Ä’∏’ª ’∞’°’¥’°÷Ä÷â",
                "description_en": "Personality-filled ornaments for your friend.",
                "description_ru": "–£–∫—Ä–∞—à–µ–Ω–∏—è, –ø–æ–ª–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –¥–ª—è –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞.",
                "image_url": "images/default_product_type_image.png",
            },
            {
                "type": "family",
                "title_hy": "‘∏’∂’ø’°’∂’´÷Ñ’´ ’∞’°’¥’°÷Ä",
                "title_en": "For the family",
                "title_ru": "–î–ª—è —Å–µ–º—å–∏",
                "description_hy": "’ì’°’µ’ø’• ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä’´ ’∞’°’æ’°÷Ñ’°’Æ’∏÷Ç’ù ’®’∂’ø’°’∂’•’Ø’°’∂ ’∞’´’∑’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â",
                "description_en": "Wooden toy sets for family memories.",
                "description_ru": "–ù–∞–±–æ—Ä—ã –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –∏–≥—Ä—É—à–µ–∫ –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                "image_url": "images/default_product_type_image.png",
            },
            {
                "type": "corporate",
                "title_hy": "‘ø’∏÷Ä’∫’∏÷Ä’°’ø’´’æ’´ ’∞’°’¥’°÷Ä",
                "title_en": "For corporate clients",
                "title_ru": "–î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                "description_hy": "‘≤÷Ä’•’∂’§’°’æ’∏÷Ä’¥’°’¥’¢ ’¶’°÷Ä’§’•÷Ä’ù ’±’•÷Ä ’©’´’¥’´ ÷á ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â",
                "description_en": "Branded ornaments for your team and partners.",
                "description_ru": "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
                "image_url": "images/default_product_type_image.png",
            },
            {
                "type": "custom",
                "title_hy": "‘±’µ’¨",
                "title_en": "Custom / Other",
                "title_ru": "–î—Ä—É–≥–∏–µ / –ü–æ –∑–∞–∫–∞–∑—É",
                "description_hy": "’Ä’°’ø’∏÷Ç’Ø ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’ù ÷Å’°’∂’Ø’°÷Å’°’Æ ’°’º’´’©’´ ’∞’°’¥’°÷Ä÷â",
                "description_en": "Special orders for any occasion.",
                "description_ru": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è.",
                "image_url": "images/default_product_type_image.png",
            },
        ]

    def get_all(self):
        return self.data

    def get_by_type(self, type):
        return [item for item in self.data if item["type"] == type]